n = int(input())
house=[[] for _ in range(n)]
for i in range(n):
    house[i]=(list(map(int, input().split())))
pipe = [[[0,0,0] for _ in range(n)] for _ in range(n)]
# [행][열][가로:0/대각선:1/세로:2]
pipe[0][1][0] = 1

'''
1. 가로 방향
가로 방향으로 놓을 수 있는 경우는, 이전 파이프를 가로 또는 대각선으로 놓은 경우
즉 [x][y-1] 칸의 [0]번째 값과 [1]번째 값을 더해주면 된다.
2. 대각선 방향
대각선 방향으로 놓을 수 있는 경우는, 이전 파이프가 뭐든지 상관없이 가로/대각선/세로 일 때 모두 가능하다.
즉, [x-1][y-1] 칸의 [0]번째 값과 [1]번째 값, [2]번째 값을 더해주면 된다.
3. 세로 방향
세로 방향으로 놓을 수 있는 경우는, 이전 파이프를 세로 또는 대각선을 놓은 경우이다.
즉 [x-1][y]칸의 [1]번째 값과 [2]번째 값을 더해주면 된다.
'''
# 미리 윗 줄 가로 값을 다 입력한다.
# 왜냐면 아래에서 간편하게 1,1에서 시작하려고
# 이 작업을 수행하지 않으면 밑에서 예외처리할게 는다.
for i, x in enumerate(pipe[0][2:]):
	if house[0][i+2]:
		break
	pipe[0][i+2][0] = pipe[0][i+1][0]

# [행][열][가로:0/대각선:1/세로:2]
for i in range(1, n):
	for j in range(1, n):
		if house[i][j]: 
			continue
		# 가로라면 x-1번지 값을 기준으로 계산해야한다. 왜냐면 그 값이 여태까지의 누적된 값이므로
		# 세로 가로는 위,왼쪽에 1이 있어도 안막아도된다. 왜냐면 그쪽 pipe 번지 값이 0이기 때문에
		pipe[i][j][0] = pipe[i][j-1][0]+pipe[i][j-1][1]
		pipe[i][j][2] = pipe[i-1][j][1]+pipe[i-1][j][2]
		# 대각선은 마지막에 위,왼쪽이 1로 막혀있어도 뚫고 값을 넣기 때문에
		# 위, 왼쪽 벽 예외처리를 해준다.
		if house[i-1][j] or house[i][j-1]:
			continue
		pipe[i][j][1] = sum(pipe[i-1][j-1]) # 0,1,2번째를 합한다.
print(sum(pipe[n-1][n-1]))